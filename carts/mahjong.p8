pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--majong test
function all_shuf(dict)
	local check={}
	local tb={}
	for i=1,#dict do
		add(check,i)
	end
	while #check>0 do
		next=check[flr(rnd(#check))+1]
		add(tb,next)
		del(check,next)
	end
	print("tb="..#tb)
	return tb
end
function wall_draw(wall,num)
	local ret={}
	for i=1,num do
		print(wall.d[wall.now_take])
		add(ret,wall.d[wall.now_take])
		wall.now_take+=1
	end
	return ret
end

--obsolete
function add_hand_old(dict,hand,num)
	while #hand.h<num do
		next=flr(rnd(#dict))+1
		if not contains(hand.h,next) then
			add(hand.h,next)
		end
	end
end

-->8
--draw function
function drawc(sp,x,y)
	palt(0,false)
	palt(13,true)
	spr(sp,x,y)
	palt()
end
function draw_hand(dict,list,x,y)
	for i=1,#list do
		drawc(dict[list[i]].sp,x+7*(i-1),y)
	end
end

wall_loc={{x=110,y=103},
{x=19,y=110},
{x=10,y=18},
{x=104,y=18}}
function draw_wallc(tp,loc)
	
end
function draw_wall(dict,wall)
	--[[
	wall={d=all_shuf(dict),
		draw_start=1,--1=r,2=d,3=l,4=u
		take_start=1,
		now_take=1,
		last_take=0,
		last_mark=16}
	]]
	local e=flr(#dict/4)--each wall num
	local da={{1,e},{1,e},{1,e},{1,e}}
	
	local rest=#dict-wall.last_mark
		-wall.last_take
	local r=wall.take_start*2
	da[wall.draw_start][2]-=r
	
	local turn={}--seq.of draw_start
	for i=wall.draw_start-1,wall.draw_start+4 do
		add(turn,i%4+1)
	end
	print(turn[1]..turn[2]..turn[3]..turn[4]..turn[5],2,2,7)
	
	while r>0 do
		
	end
	--[[
	--up
	for i=da[4][1],da[4][2] do
		local y=2*flr(i%2)+18
		if(i==da[4][2]and i%2==0)y=18
		spr(105,104-5*flr((i-1)/2),y)
	end
	--down
	for i=da[2][1],da[2][2] do
		local y=2*flr(i%2)+100
		spr(105,19+5*flr((i-1)/2),y)
	end
	--left
	for i=da[3][1],da[3][2] do
		local x=10-2*(i%2)
		spr(106,x,18+5*flr((i-1)/2),1,1,1,nil)
	end
	--right
	for i=da[1][1],da[1][2] do
		local x=2*flr(i%2)+110
		spr(106,x,103-5*flr((i-1)/2))
	end
	]]
	
end
-->8
--utility functions
function contains(list,value)
	for i in all(list) do
		if(value==i)return true
	end
	return false
end
function swap(list,a,b)
	local t=list[a]
	list[a]=list[b]
	list[b]=t
end
function qsort_part(list,l,r,p)
	local pv=list[p]
	swap(list,p,r)
	local s=l
	for i=l,r-1 do
		if list[i]<pv then
			swap(list,i,s)
			s+=1
		end
	end
	swap(list,p,s)
	return s
end
function qsort(list,l,r)
	if r>l then
		local p=r
		local np=qsort_part(list,l,r,p)
		qsort(list,l,np-1)
		qsort(list,np+1,r)
	end
end
function sort_hand(hand)
	qsort(hand,1,#hand)
end


--init dict
function init_maj_dict()
	local dict={}
	for ty in all({"w","b","s"})do
		for c_n=1,9 do
			local start_sp=64
			if(ty=="b")start_sp=80
			if(ty=="s")start_sp=96
			addmt(dict,4,ty..c_n,
				start_sp+c_n-1)
		end
	end
	addmt(dict,4,"se",112)
	addmt(dict,4,"ss",113)
	addmt(dict,4,"sw",114)
	addmt(dict,4,"sn",115)
	addmt(dict,4,"sc",116)
	addmt(dict,4,"sf",117)
	addmt(dict,4,"sb",118)
	add(dict,{n="fm",sp=119})
	add(dict,{n="fl",sp=120})
	add(dict,{n="fj",sp=121})
	add(dict,{n="fch",sp=122})
	add(dict,{n="fsp",sp=123})
	add(dict,{n="fsu",sp=124})
	add(dict,{n="ff",sp=125})
	add(dict,{n="fw",sp=126})
	return dict
end
function addmt(tb,num,_n,_sp)
	for i=1,num do
		add(tb,{n=_n..i,sp=_sp})
	end
end

function dr_i(s)
if s then
poke(0x5f2d,1)
dr_t=0
end
end
function dr_u(s)
if s then
dr_t=dr_t==0 and 1 or 0
dr_x=stat(32)
dr_y=stat(33)
dr_c=dr_t==0 and 5 or 7
line(0,dr_y,127,dr_y,dr_c)
line(dr_x,0,dr_x,127,dr_c)
dr_x1=dr_x<64 and dr_x+2 or dr_x-14
dr_y1=dr_y<64 and dr_y+2 or dr_y-14
rectfill(dr_x1,dr_y1,dr_x1+12,dr_y1+12,7)
print(dr_x,dr_x1+1,dr_y1+1,5)
print(dr_y,dr_x1+1,dr_y1+7)
end
end
-->8
--testing
function _init()
	debug=true
	dr_i(debug)
	s_game()
end
--[[
gp: game phase
	0: shuffle
	1: dice
	2: get card
	3: flower bye

]]
function s_game()
	_update=u_game
	_draw=d_game
	i_game()
end

function i_game()
	gp=0
	dict=init_maj_dict()
	hands={
		--h=hand, f=flower,k=kezi,g=get
		{h={},f={},k={},g={}},
		{h={},f={},k={},g={}},
		{h={},f={},k={},g={}},
		{h={},f={},k={},g={}}
	}
	wall={d=all_shuf(dict),
		draw_start=1,--1=r,2=d,3=l,4=u
		take_start=3,
		now_take=1,
		last_take=0,
		last_mark=16}
	temphand=wall_draw(wall,16)
	sort_hand(temphand)
	--[[
	sort_hand(hands[1].h)
	draw_hand(dict,hands[1].h,15,120)
	]]
end

function u_game()
	cls()
	rectfill(0,0,127,127,13)
	--rect(0,0,127,127,7)
	draw_hand(dict,temphand,15,120)
	draw_wall(dict,wall)
	dr_u(debug)
end

function d_game()

end


__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333d00000000777777707777777077777770777777707777777077777770
7777773d7777773d7000073d7000073d7000073d7707773d7707773d7777073d7707773d00000000777777707077777070777770787778707077707070777070
7777773d7700073d7777773d0070703d7707773d0000003d7700073d7707073d7000073d00000000778887707777777077777770777777707777777077777770
7000003d7777773d7700773d0070703d7000073d7777773d7007773d7707073d7707073d00000000778887707777777077707770777777707770777070777070
7777773d7777773d7777773d7000003d7707073d7077073d7707773d7077073d7707073d00000000778887707777777077777770777777707777777077777770
7777773d7000003d7000003d7777773d7000003d0777703d7770003d0777703d7077003d00000000777777707777707077777070787778707077707070777070
7878783d7878783d7878783d7878783d7878783d7878783d7878783d7878783d7878783d00000000777777707777777077777770777777707777777077777770
788888dd788888dd788888dd788888dd788888dd788888dd788888dd788888dd788888dd00000000000000000000000000000000000000000000000000000000
d333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333d00000000000000000000000000000000000000000000000000000000
77bb773d7777773dcc77773dcc77bb3dcc77bb3dbb7bb73dbb77773d7c1c173dbbbbbb3d00000000000000000000000000000000000000000000000000000000
7bbbb73d77bb773dc177773dc177b33dc177b33db37b373db3bb773d7cccc73db3b3b33d00000000000000000000000000000000000000000000000000000000
bb88bb3d77b3773d7788773d7777773d7788773d7777773d77b3bb3d7c1c173d8888883d00000000000000000000000000000000000000000000000000000000
bb82b33d7777773d7782773d7777773d7782773d8878873d8888b33d7cccc73d8282823d00000000000000000000000000000000000000000000000000000000
7bbb373d77cc773d7777bb3d7777773d7777773d8278273d8282773d7c1c173dcccccc3d00000000000000000000000000000000000000000000000000000000
77b3773d77c1773d7777b33dbb77cc3dbb77cc3d8878873d8888773d7cccc73dc1c1c13d00000000000000000000000000000000000000000000000000000000
777777dd777777dd777777ddb377c1ddb377c1dd827827dd828277dd7c1c17dd777777dd00000000000000000000000000000000000000000000000000000000
d333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333d73333000333337007888800088888700000000000000000000000000
7788873d77c7773d77c7773dc777b73db777c73db7b7b73d7787773db7777b3d87c7b73d33333000333337008888800088888700000000000000000000000000
7888283d77c7773d77c7773dc777b73db777c73db7b7b73d7727773db7337b3d2717373d33333000333337008888800088888700000000000000000000000000
7888873d7717773d7717773d1777373d3787173d3737373db7c7b73d3b77b33d87c7b73d33333000333337008888800088888700000000000000000000000000
8888773d7777773d7777773d7777773d7787773d7777773d3717373d7777773d2717373d33333000733337008888800078888700000000000000000000000000
7878b33d77b7773db777b73db777c73dc727b73dc7c7c73d7777773d1c77c13d87c7b73d77777000000000007777700000000000000000000000000000000000
bbb3373d77b7773db777b73db777c73dc777b73dc7c7c73db7c7b73dc7117c3d2717373d00000000000000000000000000000000000000000000000000000000
7b7737dd773777dd377737dd377717dd177737dd171717dd371737ddc7777cdd777777dd00000000000000000000000000000000000000000000000000000000
d333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333dd333333d00000000
7777773d7777773d7777773d7777773d7777773d7777773d7777773d7111113d7771773d7b71113d11b1713d8822273d8827273d8877773d8777873d00000000
7000073d7700073dd707073ddd77073d7787773d7bbb373d7111173d7171713d7771773dbb77173d1bb1113d87272b3d872b273d877bb73d8787873d00000000
7077773d7077773dd707073dd707073d8888873d7b77773d7177173d7171713d7b71113d7b11173d11b1713d88222b3d8822273d887bb73d8b8b873d00000000
7000073d7700773dd707073dd707073d8787873d7bbb373d7177173d8887773d7b7b773db888873d77b7bb3d782b773d78bbbb3d877bbb3d7888873d00000000
7077773d7777073dd707073dd707073d8888873d7b77773d7177173d8827773d7bb8873d78822b3db7bbbb3d887bbb3d88b8883d772bb73dbb72223d00000000
7000073d7000773d7070773dd770073d7787773d7b77773d7111173d828bb73dbbb8273db8282b3d7bb7b73d7bbb773dbbb8823d722bb73d7bb2223d00000000
777777dd777777dd777777dd777777dd777777dd777777dd777777dd7bbb77dd7b3377ddbb7bb7dd77b7bbdd777bb7dd77b777dd772bb7dd77b228dd00000000
